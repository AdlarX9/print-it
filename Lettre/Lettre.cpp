#include <vector>
#include <map>
#include <iostream>
#include <string>

#include "Lettre.hpp"

using namespace std;

const unsigned int Lettre::nbrLignes = 12;
const unsigned int Lettre::largeur = 17;

unsigned int Lettre::getNbrLignes() {
	return nbrLignes;
}

unsigned int Lettre::getLargeur() {
	return largeur;
}

string const Lettre::lettres[nbrLignes] = {
	"................. ................. ................. ................. ................. ................. ................. ................. ................. ................. ................. ................. ................. ................. ................. ................. ................. ................. ................. ................. ................. ................. ................. ................. ................. ................. .................",
	"........*........ .***********..... .....*******..... .********........ .***************. .***************. .....*******..... .***.........***. ...***********... .***************. .***.........***. .****............ .*.............*. .***.........***. ....*********.... .**********...... ....********..... .**********...... ....**********... .***************. .***.........***. ***...........*** .*......*......*. .*.............*. .*.............*. .**************** .................",
	".......***....... .*************... ...***********... .***********..... .***************. .***************. ...***********... .***.........***. ...***********... .***************. .***.......***... .****............ .**...........**. .*****.......***. ...***********... .*************... ...***********... .*************... ..************... .***************. .***.........***. ***...........*** .**.....*.....**. .***.........***. .***.........***. .***************. .................",
	"......*****...... .***........***.. ..***........***. .***....******... .***............. .***............. ..***........***. .***.........***. .......***....... .......***....... .***.....***..... .****............ .*****.....*****. .***.***.....***. ..***.......***.. .***........***.. ..***.......***.. .***........***.. .***............. .......***....... .***.........***. .***.........***. .**....***....**. ...***.....***... ...***.....***... ............****. .................",
	".....***.***..... .***.......****.. .***............. .***.......****.. .***............. .***............. .***............. .***.........***. .......***....... .......***....... .***...***....... .****............ .***.***.***.***. .***..***....***. .***.........***. .***........***.. .***.........***. .***........***.. .****............ .......***....... .***.........***. ..***.......***.. .**....***....**. .....***.***..... .....***.***..... ..........****... .................",
	"....***...***.... .*************... ***.............. .***.........***. .**************.. .************.... ***.............. .***************. .......***....... .......***....... .***.***......... .****............ .***...***...***. .***...***...***. ***...........*** .*************... ***.....***...*** .*************... ...**********.... .......***....... .***.........***. ...***.....***... ..**..**.**..**.. .......***....... .......***....... ........****..... .................",
	"...***********... .*************... ***.............. .***.........***. .**************.. .************.... ***.......******. .***************. .......***....... .......***....... .*****.***....... .****............ .***....*....***. .***....***..***. ***...........*** .**********...... ***......***..*** .**********...... .....**********.. .......***....... .***.........***. ....***...***.... ..**..**.**..**.. .......***....... .......***....... ......****....... .................",
	"..*************.. .***........***.. .***............. .***.......****.. .***............. .***............. .***......******. .***.........***. .......***....... .......***....... .***.....***..... .****............ .***.........***. .***.....***.***. .***.........***. .***............. .***.......*****. .***..***........ .............***. .......***....... .***.........***. .....***.***..... ..**.**...**.**.. .....***.***..... .......***....... ....****......... .................",
	".***.........***. .***........***.. ..***........***. .***....******... .***............. .***............. ..***........***. .***.........***. .......***....... ***....***....... .***.......***... .****............ .***.........***. .***......******. ..***.......***.. .***............. ..***.......****. .***...***....... ...........****.. .......***....... ..***.......***.. ......*****...... ..**.**...**.**.. ...***.....***... .......***....... ..****........... .................",
	"***...........*** .*************... ...***********... .***********..... .***************. .***............. ...************.. .***.........***. ...***********... .***..***........ .***.........***. .***************. .***.........***. .***.......*****. ...***********... .***............. ...*************. .***....***...... .*************... .......***....... ...***********... .......***....... ...***.....***... .***.........***. .......***....... .***************. .................",
	"**.............** .***********..... .....*******..... .********........ .***************. .***............. .....*******..... .***.........***. ...***********... ...****.......... .***...........** .***************. .***.........***. .***.........***. ....********..... .***............. ....*********.*** .***.....***..... .**********...... .......***....... ......*****...... ........*........ ....*.......*.... .*.............*. .......***....... ****************. .................",
	"................. ................. ................. ................. ................. ................. ................. ................. ................. ................. ................. ................. ................. ................. ................. ................. ................. ................. ................. ................. ................. ................. ................. ................. ................. ................. .................",
};


map<char, int> Lettre::lettresPosition;

void Lettre::buildAlphabet() {
	for (char lettre = 'A'; lettre <= 'Z'; lettre++) {
		lettresPosition[lettre] = lettre - 'A';
	}
	lettresPosition[' '] = 26;
}

vector<vector<bool> > Lettre::pattern() const {
	vector<vector<bool> > pattern;
	
	if (lettresPosition.find(m_char) != lettresPosition.end()) {
		
		int offset = lettresPosition[m_char] * largeur + lettresPosition[m_char];
		
		for (int i = 0; i < nbrLignes; i++) {
			vector<bool> line;
			for (int j = offset; j < offset + largeur; j++) {
				if (lettres[i][j] == '*') {
					line.push_back(true);
				} else {
					line.push_back(false);
				}
			}
			pattern.push_back(line);
		}
		
		
	} else {
		// Si la lettre n'est pas présente dans lettresPosition, renvoyer un modèle vide
		pattern = vector<vector<bool> >(nbrLignes, vector<bool>(largeur, false));
	}
	
	return pattern;
}





Lettre::Lettre(char lettre) : m_char(lettre) {
	buildAlphabet();
	m_pattern = this->pattern();
}

vector<vector<bool> > Lettre::getPattern() const {
	return m_pattern;
}

void Lettre::printLine(unsigned int nbr, char plein, char vide) const {
	vector<vector<bool> > pattern = this->getPattern();
	char full = plein;
	char empty = vide;
	
	for (int i = 0; i < largeur; i++) {
		if (pattern[nbr][i])
			cout << full;
		else
			cout << empty;
	}
}

void Lettre::afficher(char plein, char vide) const {
	
	vector<vector<bool> > pattern = this->getPattern();
	
	char full = plein;
	char empty = vide;
	
	cout << endl;
	for (int i = 0; i < nbrLignes; i++) {
		for (int j = 0; j < largeur; j++) {
			if (pattern[i][j]) {
				cout << full;
			} else {
				cout << empty;
			}
		}
		cout << endl;
	}
	cout << endl;
}

Lettre::~Lettre() {}
